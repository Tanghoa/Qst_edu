<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.recruit.dao.StaionMapper" >
  <resultMap id="BaseResultMap" type="com.recruit.entity.Staion" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="s_name" property="sName" jdbcType="VARCHAR" />
    <result column="dept_id" property="deptId" jdbcType="INTEGER" />
    <result column="require" property="require" jdbcType="INTEGER" />
    <result column="work" property="work" jdbcType="INTEGER" />
    <result column="salary" property="salary" jdbcType="DECIMAL" />
    <result column="city" property="city" jdbcType="VARCHAR" />
    <result column="job" property="job" jdbcType="VARCHAR" />
    <result column="education" property="education" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.recruit.entity.Staion" extends="BaseResultMap" >
    <result column="des" property="des" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, s_name, dept_id, require, work, salary, city, job, education, status
  </sql>
  <sql id="Blob_Column_List" >
    des
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.recruit.entity.StaionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from station
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.recruit.entity.StaionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from station
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from station
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from station
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.recruit.entity.StaionExample" >
    delete from station
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.recruit.entity.Staion" >
    insert into station (id, s_name, dept_id, 
      require, work, salary, 
      city, job, education, 
      status, des)
    values (#{id,jdbcType=INTEGER}, #{sName,jdbcType=VARCHAR}, #{deptId,jdbcType=INTEGER}, 
      #{require,jdbcType=INTEGER}, #{work,jdbcType=INTEGER}, #{salary,jdbcType=DECIMAL}, 
      #{city,jdbcType=VARCHAR}, #{job,jdbcType=VARCHAR}, #{education,jdbcType=VARCHAR}, 
      #{status,jdbcType=VARCHAR}, #{des,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.recruit.entity.Staion" >
    insert into station
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="sName != null" >
        s_name,
      </if>
      <if test="deptId != null" >
        dept_id,
      </if>
      <if test="require != null" >
        require,
      </if>
      <if test="work != null" >
        work,
      </if>
      <if test="salary != null" >
        salary,
      </if>
      <if test="city != null" >
        city,
      </if>
      <if test="job != null" >
        job,
      </if>
      <if test="education != null" >
        education,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="des != null" >
        des,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="sName != null" >
        #{sName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="require != null" >
        #{require,jdbcType=INTEGER},
      </if>
      <if test="work != null" >
        #{work,jdbcType=INTEGER},
      </if>
      <if test="salary != null" >
        #{salary,jdbcType=DECIMAL},
      </if>
      <if test="city != null" >
        #{city,jdbcType=VARCHAR},
      </if>
      <if test="job != null" >
        #{job,jdbcType=VARCHAR},
      </if>
      <if test="education != null" >
        #{education,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="des != null" >
        #{des,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.recruit.entity.StaionExample" resultType="java.lang.Integer" >
    select count(*) from station
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update station
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.sName != null" >
        s_name = #{record.sName,jdbcType=VARCHAR},
      </if>
      <if test="record.deptId != null" >
        dept_id = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.require != null" >
        require = #{record.require,jdbcType=INTEGER},
      </if>
      <if test="record.work != null" >
        work = #{record.work,jdbcType=INTEGER},
      </if>
      <if test="record.salary != null" >
        salary = #{record.salary,jdbcType=DECIMAL},
      </if>
      <if test="record.city != null" >
        city = #{record.city,jdbcType=VARCHAR},
      </if>
      <if test="record.job != null" >
        job = #{record.job,jdbcType=VARCHAR},
      </if>
      <if test="record.education != null" >
        education = #{record.education,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.des != null" >
        des = #{record.des,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update station
    set id = #{record.id,jdbcType=INTEGER},
      s_name = #{record.sName,jdbcType=VARCHAR},
      dept_id = #{record.deptId,jdbcType=INTEGER},
      require = #{record.require,jdbcType=INTEGER},
      work = #{record.work,jdbcType=INTEGER},
      salary = #{record.salary,jdbcType=DECIMAL},
      city = #{record.city,jdbcType=VARCHAR},
      job = #{record.job,jdbcType=VARCHAR},
      education = #{record.education,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      des = #{record.des,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update station
    set id = #{record.id,jdbcType=INTEGER},
      s_name = #{record.sName,jdbcType=VARCHAR},
      dept_id = #{record.deptId,jdbcType=INTEGER},
      require = #{record.require,jdbcType=INTEGER},
      work = #{record.work,jdbcType=INTEGER},
      salary = #{record.salary,jdbcType=DECIMAL},
      city = #{record.city,jdbcType=VARCHAR},
      job = #{record.job,jdbcType=VARCHAR},
      education = #{record.education,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.recruit.entity.Staion" >
    update station
    <set >
      <if test="sName != null" >
        s_name = #{sName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="require != null" >
        require = #{require,jdbcType=INTEGER},
      </if>
      <if test="work != null" >
        work = #{work,jdbcType=INTEGER},
      </if>
      <if test="salary != null" >
        salary = #{salary,jdbcType=DECIMAL},
      </if>
      <if test="city != null" >
        city = #{city,jdbcType=VARCHAR},
      </if>
      <if test="job != null" >
        job = #{job,jdbcType=VARCHAR},
      </if>
      <if test="education != null" >
        education = #{education,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="des != null" >
        des = #{des,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.recruit.entity.Staion" >
    update station
    set s_name = #{sName,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=INTEGER},
      require = #{require,jdbcType=INTEGER},
      work = #{work,jdbcType=INTEGER},
      salary = #{salary,jdbcType=DECIMAL},
      city = #{city,jdbcType=VARCHAR},
      job = #{job,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      des = #{des,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.recruit.entity.Staion" >
    update station
    set s_name = #{sName,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=INTEGER},
      require = #{require,jdbcType=INTEGER},
      work = #{work,jdbcType=INTEGER},
      salary = #{salary,jdbcType=DECIMAL},
      city = #{city,jdbcType=VARCHAR},
      job = #{job,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>